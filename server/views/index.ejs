<!DOCTYPE html>
<html>
<head>
    <title><%= title %></title>
    <link rel='stylesheet' href='/css/bootstrap.min.css' />
    <script src="/js/vue.min.js"></script>
    <script src="/js/vue-resource.min.js"></script>
</head>
<body id="app" class="col-md-offset-1 col-md-10">

    <h1 v-if="!allDeathWaring" style="color: red">Warning: 当前所有爬虫均已死亡, 请及时补充!</h1>

    <h2>当前所有的爬虫一览 ( 当前有 <strong>{{runingNum}}</strong>  个爬虫正在运行)</h2>

    <table class="table table-striped">
        <thead>
            <tr>
                <td width="100">ID</td>
                <td width="300">UserQQ</td>
                <td width="300">Password</td>
                <td width="200">当前状态</td>
                <td width="100"></td>
                <td width="100"></td>
            </tr>
        </thead>
        <tbody>
            <!-- <tr v-for="QQ in QQArrState" v-if="QQ.isLogin !== '7 (已被人为删除)'"> -->  <!-- 不显示已删除 -->
            <tr v-for="QQ in QQArrState" v-bind:class="{'success' : QQ.isLogin === '1 (登录成功, 正在爬取)', 'danger' : QQ.isLogin === '2 (账号已被冻结)'}">    <!-- 显示已删除 -->
                <td>{{ $index }}</td>
                <td>{{ QQ.userQQ  }}</td>
                <td>{{ QQ.password  }}</td>
                <td>{{ QQ.isLogin }}</td>
                <td><div class="btn btn-danger" @click=deleteQQ($index)>删除当前账号</div></td>
                <td><div class="btn btn-warning" @click=pauseQQ($index)>暂停使用/恢复当前账号</div></td>
            </tr>
        </tbody>
    </table>

    <h2>新增爬虫账号</h2>
    <label style="float: left;margin:8px 20px 0 0;">新增单个账号</label>
    <input type="text" name="userQQ" style="width:200px;float: left" class="form-control" v-model="newUserQQ" placeholder="请输入qq号">
    <input type="text" name="password" style="width:200px;float: left" class="form-control" v-model="newPassword"  placeholder="请输入qq密码">
    <button class="btn btn-primary" @click="newQQuser()">提交</button>
    <br>
    <br style="clear: both">
    <label>新增多个账号</label>
    <textarea v-model="addManyQQStr" style="width: 300px;height: 100px"></textarea>
    <button class="btn btn-primary" @click="newManyQQuser()">提交</button>
    <br><br>

    <h2>爬虫管理</h2>
    <div class="btn btn-warning" @click=stopAll()>停止爬虫运行</div>
    <div class="btn btn-primary" @click=startAll(1)>开始正常爬取</div>
    <div class="btn btn-primary" @click=startAll(2)>开始无阻塞爬取</div>
    <div class="btn btn-primary" @click=startAll(3)>开始验证码检查</div>
    <div class="btn btn-primary" @click=startAll(4)>开始登录不爬取</div>
    <div class="btn btn-info"    @click=restartAll()>恢复所有爬虫</div>
    <div class="btn btn-info"    @click=restartAll2()>恢复操作过于频繁的爬虫</div>
    <br>
    <br>
    <label>设置同时进行爬取的爬虫的最大数量</label>
    <input type="text" v-model="setMaxNum" @keydown.enter="setQQmax()">
    <div class="btn btn-success" @click=setQQmax()>设置</div><br>
    <label>设置间隔时间(毫秒)</label>
    <input type="text" v-model="setTimeoutNum" @keydown.enter="setQQTimeout()">
    <div class="btn btn-success" @click=setQQTimeout()>设置</div>
    <br><br>

    <h2>当前爬取情况</h2>
    <table class="table table-striped">
        <tbody>
            <tr>
                <td>当前爬虫状态</td>
                <td>已爬取的QQ号</td>
                <td>待爬取的QQ号</td>
                <td>已爬取个人信息数量</td>
                <td>已爬取好友关系数量</td>
                <td>已爬取兴趣列表数量</td>
                <td>同时进行最大数量</td>
                <td>间隔时间(毫秒)</td>
            </tr>
            <tr>
                <td>{{ QQstate }}</td>
                <td>{{ statusQQdone }}</td>
                <td>{{ statusQQNumbers }}</td>
                <td>{{ userInfoNum }}</td>
                <td>{{ friendsNum }}</td>
                <td>{{ interetsNum }}</td>
                <td>{{ config.maxQQ }}</td>
                <td>{{ config.timeout }}</td>

            </tr>
        </tbody>
    </table>
    <br><br>

    <h2>直接执行代码</h2>
    <form><textarea class="form-control" v-model="evalCode"></textarea></form>
    <button class="btn btn-primary" @click="runCode()">提交</button>
    <br><br>

    <div v-if="verifyImg" style="position:fixed;top:50%;left:50%;transform:translateX(-50%)translateY(-50%);transition:0.3s;padding:40px;background-color:#ddd;">
        <img :src="'/img/' + verifyImg" alt="验证码" style="margin-bottom:20px;">
        <input type="text" id="verifyInput" class="form-control" autofocus placeholder="请输入验证码" style="margin-bottom:20px;" v-model="verifyCode" @keydown.enter="submitVerify()">
        <button class="btn btn-primary" @click="submitVerify()">确定</button>
    </div>
    <script>
        var app = new Vue({
            el: '#app',
            data: {
                QQArr           : [],       // 从后台获取到的爬虫情况
                newUserQQ       : "",       // 与 新增账号 QQ号 绑定
                newPassword     : "",       // 与 新增账号 密码 绑定
                addManyQQStr    : "",       // 与 新增账号 多个账号绑定
                evalCode        : "",       // 与 直接执行代码 绑定

                QQstateNum      : -1,       // 与 当前爬取情况 状态 相关
                statusQQdone    : 0,        // 与 当前爬取情况 已爬取QQ数 绑定
                statusQQNumbers : 0,        // 与 当前爬取情况 将要爬取QQ数 绑定
                config          : {},       // 与 当前爬取情况 设置 绑定
                setMaxNum       : "",       // 与 当前爬取情况 设置最大数量 绑定
                setTimeoutNum   : "",       // 与 当前爬取情况 设置间隔时间 绑定
                userInfoNum     : 0,        // 与 当前爬取情况 已爬取个人信息 绑定
                friendsNum      : 0,        // 与 当前爬取情况 已爬取好友关系 绑定
                interetsNum     : 0,        // 与 当前爬取情况 已爬取兴趣列表 绑定

                getQQArrTimer   : 0,        // 全局　getQQArr　定时器变量,
                verifyImg       : "",       // 验证码图片id
                verifyCode      : "",       // 与 验证码输入框 绑定,

            },
            created: function() {
                this.getUserInfo();
            },
            computed: {

                // 从后台获取到的爬虫情况的状态详情
                QQArrState : function(){

                    var arr = [];

                    this.QQArr.forEach(function(item, index){

                        if(item.isLogin === 7){
                            arr[index] = {userQQ : "空", password : "空", isLogin : "7 (已被人为删除)"};
                            return;
                        }

                        arr[index] = {}

                        arr[index].userQQ = item.userQQ;
                        arr[index].password = item.password;

                        switch(item.isLogin){
                            case 0 : arr[index].isLogin = "0 (没有登录)"; break;
                            case 1 : arr[index].isLogin = "1 (登录成功, 正在爬取)"; break;
                            case 2 : arr[index].isLogin = "2 (账号已被冻结)"; break;
                            case 3 : arr[index].isLogin = "3 (正在登录)"; break;
                            case 4 : arr[index].isLogin = "4 (账号或者密码不正确)"; break;
                            case 5 : arr[index].isLogin = "5 (账号操作过于频繁)"; break;
                            case 6 : arr[index].isLogin = "6 (已被人为暂停)"; break;
                            case 8 : arr[index].isLogin = "8 (因有验证码的缘故, 已暂停使用)"; break;
                            case 9 : arr[index].isLogin = "9 (通过验证码验证, 已暂停使用)"; break;
                            default : arr[index].isLogin = "(未知参数)"
                        }
                    })

                    return arr;
                },

                // 当前正在进行爬取的 QQ 号 的数量
                runingNum : function(){

                    var temp = 0;

                    this.QQArr.forEach(function(item, index){
                        if(item.isLogin === 1) temp ++;
                    })

                    return temp;
                },

                // 警告当前是否有爬虫还活着
                allDeathWaring : function(){

                    var temp = 0;

                    this.QQArr.forEach(function(item, index){
                        if(item.isLogin === 1 || item.isLogin === 0 || item.isLogin === 3) temp ++;
                    })

                    return temp;
                },

                // 与 当前爬取情况 状态 绑定
                QQstate : function(){

                    var temp = "";

                    switch(this.QQstateNum) {
                        case -1  : temp = (this.QQstateNum + " : 爬虫已终止");break;
                        case  1  : temp = (this.QQstateNum + " : 爬虫正常运行");break;
                        case  2  : temp = (this.QQstateNum + " : 爬虫无阻塞运行");break;
                        case  3  : temp = (this.QQstateNum + " : 爬虫验证码检查");break;
                        case  4  : temp = (this.QQstateNum + " : 爬虫登录不爬取");break;
                        default  : temp = (this.QQstateNum + " : 未知参数");break;
                    }

                    return temp;
                }
            },
            methods: {

                /**
                 * 新增一个爬虫用户, 实现检查 QQ号 和 密码 的合法性, 并进行提交
                 */
                newQQuser: function() {

                    // 检查新建 QQ号 的表单是否合法
                    if (this.newUserQQ.length < 5 || this.newPassword.length < 5) {
                        alert("请填写正确的 QQ号 和 QQ密码 后重试!");
                        return;
                    }

                    // 检查当前爬虫列表中是否已存在要添加的爬虫
                    var passFlag = 1;
                    var that = this;
                    this.QQArrState.forEach(function(item, index){
                        if(that.newUserQQ == item.userQQ){
                            passFlag = 0;
                        }
                    })
                    if(!passFlag){alert("当前爬虫列表中已存在要添加的爬虫, 若要修改密码, 请删除已存在的爬虫!");return;}

                    var newQQobj = {
                        userQQ: this.newUserQQ,
                        password: this.newPassword
                    }

                    this.$http.post("/", newQQobj).then(function(data) {
                        alert(data.data)

                        this.newUserQQ = "";
                        this.newPassword = "";

                        // 创建后立即刷新列表
                        clearTimeout(this.getQQArrTimer);
                        this.getQQArr();
                    })
                },

                /**
                 * TODO : 添加多个QQ账号
                 */
                newManyQQuser : function(){

                    var temp = [];

                    var pattern = /(\S+?)-+(\S+?)(\s*?)\n/g;

                    while(true){
                        var match = pattern.exec(this.addManyQQStr)
                        if(match === null) break;

                        var passFlag = 1;

                        var that = this;

                        this.QQArrState.forEach(function(item, index){
                            if(match[1] == item.userQQ){
                                passFlag = 0;
                            }
                        })

                        temp.forEach(function(item, index){
                            if(match[1] == item.userQQ){
                                passFlag = 0;
                            }
                        })

                        // 如果重复, 跳过即可
                        if(!passFlag)continue;

                        temp.push({userQQ : match[1], password : match[2], isLogin : 0})
                    }

                    this.$http.post("/newManyQQuser", {users : temp}).then(function(data){
                       alert(data.data);
                    })
                },

                /**
                 * 定时获取当前爬虫的个人档信息, 并保存到 userInfos 中
                 */
                getUserInfo: function() {

                    this.$http.get("/list").then(function(data) {

                        this.statusQQNumbers    = data.data.status.QQNumbers;
                        this.statusQQdone       = data.data.status.QQdone;

                        this.config             = data.data.config;
                        this.verifyImg          = data.data.flags.verifyImg;
                        this.QQstateNum         = data.data.flags.QQstate;
                        this.userInfoNum        = data.data.flags.userInfoNum;
                        this.friendsNum         = data.data.flags.friendsNum;
                        this.interetsNum        = data.data.flags.interetsNum;

                        this.QQArr              = data.data.config.QQ;
                    })

                     setTimeout(this.getUserInfo, 3000)

                },

                /**
                 * 删除服务器里面特定位置的QQ号
                 * @param  {number} index 要删除的QQ号的位置
                 */
                deleteQQ :　 function(index){

                     if(typeof index !== 'number') return;

                     this.$http.post("/deleteQQ", {index : index}).then(function(data){
                        alert(data.data);
                     })

                     // 删除后立即刷新列表
                     clearTimeout(this.getQQArrTimer);
                     this.getQQArr();
                },

                /**
                 * 暂停使用/恢复服务器里面特定位置的QQ号
                 * @param  {number} index 要暂停使用/恢复的QQ号的位置
                 */
                pauseQQ : function(index){

                    if(typeof index !== 'number') return;

                    this.$http.post("/pauseQQ", {index : index}).then(function(data){
                       alert(data.data);
                    })

                    // 删除后立即刷新列表
                    clearTimeout(this.getQQArrTimer);
                    this.getQQArr();
                },

                /**
                 * 直接 eval 执行代码
                 */
                runCode : function() {
                    this.$http.post("/runCode", {code : this.evalCode}).then(function(data){
                       alert(data.data);
                    })
                },

                /**
                 * 提交验证码
                 */
                submitVerify: function () {
                    this.$http.post('/verify', {verifyCode:this.verifyCode}).then(function (res) {
                        if (res.data == 'success') {
                            this.verifyImg = "";
                            this.verifyCode = "";
                            alert('服务器已收到验证码, 正在提交...');
                        }
                    })
                },

                /**
                 * 停止当前所有爬虫的运行
                 */
                stopAll : function() {
                    this.$http.post("/stopAll").then(function(data){
                       alert(data.data);
                    })
                },

                /**
                 * 恢复所有的爬虫的运行
                 * @param  {number} state 开始进行爬取的方式, 1 代表 正常爬取,  2 代表 无阻塞爬取
                 */
                startAll : function(state) {
                    this.$http.post("/startAll", {state : state}).then(function(data){
                       alert(data.data);
                    })
                },

                /**
                 * 设置 同时进行爬取的爬虫的最大数量 的函数
                 */
                setQQmax : function(){

                    var temp = parseInt(this.setMaxNum);

                    if(!(temp > 0 && temp < 51)){
                        alert("请检查参数后再进行提交!");
                        return;
                    }

                    this.$http.post("/setQQmax", {QQmax : this.setMaxNum}).then(function(data){
                       alert(data.data);
                    })
                },

                /**
                 * 恢复所有已暂停爬虫的运行
                 * 包括 6 : 人为暂停使用  和  8 : 因验证码原因暂停使用
                 */
                restartAll : function(){
                    this.$http.post("/restartAll").then(function(data){
                       alert(data.data);
                    })
                },

                /**
                 * 恢复所有因操作过于频繁而停止运行的爬虫的运行
                 * 包括 5 代表操作过于频繁
                 */
                restartAll2 : function(){
                    this.$http.post("/restartAll2").then(function(data){
                       alert(data.data);
                    })
                },

                /**
                 * 设置爬虫的间隔时间
                 */
                setQQTimeout : function(){

                    var temp = parseInt(this.setTimeoutNum);

                    if(!(temp > 1000)){
                        alert("请检查参数后再进行提交!");
                        return;
                    }

                    this.$http.post("/setQQTimeout", {QQtime : this.setTimeoutNum}).then(function(data){
                       alert(data.data);
                    })
                }
            }
        })

        // 当将要输入验证码时， 使验证码输入框获取焦点
        app.$watch("verifyImg", function(val){
            if(val !== ""){
                document.getElementById('verifyInput').focus();
            }
        })
    </script>
  </body>
</html>

