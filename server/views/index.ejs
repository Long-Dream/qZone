<!DOCTYPE html>
<html>
<head>
    <title><%= title %></title>
    <link rel='stylesheet' href='/css/bootstrap.min.css' />
    <script src="/js/vue.min.js"></script>
    <script src="/js/vue-resource.min.js"></script>
</head>
<body id="app" class="col-md-offset-1 col-md-10">

    <h1 v-if="!allDeathWaring" style="color: red">Warning: 当前所有爬虫均已死亡, 请及时补充!</h1>

    <h2>当前所有的爬虫一览 ( 当前有 <strong>{{runingNum}}</strong>  个爬虫正在运行)</h2>

    <table class="table table-striped">
        <thead>
            <tr>
                <td width="100">ID</td>
                <td width="300">UserQQ</td>
                <td width="300">Password</td>
                <td width="200">当前状态</td>
                <td width="100"></td>
                <td width="100"></td>
            </tr>
        </thead>
        <tbody>
            <!-- <tr v-for="QQ in QQArrState" v-if="QQ.isLogin !== '7 (已被人为删除)'"> -->  <!-- 不显示已删除 -->
            <tr v-for="QQ in QQArrState">    <!-- 显示已删除 -->
                <td>{{ $index }}</td>
                <td>{{ QQ.userQQ  }}</td>
                <td>{{ QQ.password  }}</td>
                <td>{{ QQ.isLogin }}</td>
                <td><div class="btn btn-danger" @click=deleteQQ($index)>删除当前账号</div></td>
                <td><div class="btn btn-warning" @click=pauseQQ($index)>暂停使用/恢复当前账号</div></td>
            </tr>
        </tbody>
    </table>

    <h2>新增爬虫账号</h2>
    <form class="form-group" id="form">
        <input type="text" name="userQQ" class="form-control" v-model="newUserQQ" placeholder="请输入qq号">
        <input type="text" name="password" class="form-control" v-model="newPassword"  placeholder="请输入qq密码">
    </form>
    <button class="btn btn-primary" @click="newQQuser()">提交</button>
    <br><br>

    <h2>爬虫管理</h2>
    <div class="btn btn-warning" @click=stopAll()>停止爬虫运行</div>
    <div class="btn btn-primary" @click=startAll(1)>开始正常爬取</div>
    <div class="btn btn-info"    @click=startAll(2)>开始无阻塞爬取</div>

    <h2>当前爬取情况</h2>
    <table class="table table-striped">
        <tbody>
            <tr>
                <td>当前爬虫状态</td>
                <td>已爬取的QQ号</td>
                <td>待爬取的QQ号</td>
                <td>留言板的最大抓取数量</td>
                <td>说说的最大抓取数量</td>
                <td>同时进行爬取的爬虫的最大数量</td>
            </tr>
            <tr>
                <td>{{ QQstate }}</td>
                <td>{{ statusQQdone }}</td>
                <td>{{ statusQQNumbers }}</td>
                <td>{{ config.boardMax }}</td>
                <td>{{ config.shuoMax }}</td>
                <td>{{ config.maxQQ }}</td>
            </tr>
        </tbody>
    </table>
    <br><br>

    <h2>直接执行代码</h2>
    <form><textarea class="form-control" v-model="evalCode"></textarea></form>
    <button class="btn btn-primary" @click="runCode()">提交</button>
    <br><br>

    <h2>爬取的用户信息</h2>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>QQ号</th>
                <th>昵称</th>
                <th>性别</th>
                <th>年龄</th>
                <th>出生年份</th>
                <th>生日</th>
                <th>所在地</th>
                <th>出生地</th>
            </tr>
        </thead>
        <tbody>
            <tr v-for="userInfo in userInfos">
                <td>{{ userInfo.uin }}</td>
                <td>{{ userInfo.nickname }}</td>
                <td>{{ userInfo.sex == 2 ? '女' : '男' }}</td>
                <td>{{ userInfo.age }}</td>
                <td>{{ userInfo.birthyear }}</td>
                <td>{{ userInfo.birthday }}</td>
                <td>{{ userInfo.country + ' ' + userInfo.province + ' ' + userInfo.city }}</td>
                <td>{{ userInfo.hco + ' ' + userInfo.hp + ' ' + userInfo.hc }}</td>
            </tr>
        </tbody>
    </table>
    <div v-if="verifyImg" style="position:fixed;top:50%;left:50%;transform:translateX(-50%)translateY(-50%);transition:0.3s;padding:40px;background-color:#ddd;">
        <img :src="'/img/' + verifyImg" alt="验证码" style="margin-bottom:20px;">
        <input type="text" class="form-control" autofocus placeholder="请输入验证码" style="margin-bottom:20px;" v-model="verifyCode" @keydown.enter="submitVerify()">
        <button class="btn btn-primary" @click="submitVerify()">确定</button>
    </div>
    <script>
        var app = new Vue({
            el: '#app',
            data: {
                userInfos       : [],       // 从后台获取到的当前已爬的个人档的数据
                QQArr           : [],       // 从后台获取到的爬虫情况
                newUserQQ       : "",       // 与 新增账号 QQ号 绑定
                newPassword     : "",       // 与 新增账号 密码 绑定
                evalCode        : "",       // 与 直接执行代码 绑定

                QQstateNum      : -1,       // 与 当前爬取情况 状态 相关
                statusQQdone    : 0,        // 与 当前爬取情况 已爬取QQ数 绑定
                statusQQNumbers : 0,        // 与 当前爬取情况 已爬取QQ数 绑定
                config          : {},       // 与 当前爬取情况 设置 绑定

                getQQArrTimer   : 0,        // 全局　getQQArr　定时器变量,
                verifyImg       : "",       // 验证码图片id
                verifyCode      : "",       // 与 验证码输入框 绑定,

            },
            created: function() {
                this.getUserInfo();
                this.getQQArr();
            },
            computed: {

                // 从后台获取到的爬虫情况的状态详情
                QQArrState : function(){

                    var arr = [];

                    this.QQArr.forEach(function(item, index){

                        if(item.isLogin === 7){
                            arr[index] = {userQQ : "空", password : "空", isLogin : "7 (已被人为删除)"};
                            return;
                        }

                        arr[index] = {}

                        arr[index].userQQ = item.userQQ;
                        arr[index].password = item.password;

                        switch(item.isLogin){
                            case 0 : arr[index].isLogin = "0 (没有登录)"; break;
                            case 1 : arr[index].isLogin = "1 (登录成功, 正在爬取)"; break;
                            case 2 : arr[index].isLogin = "2 (账号已被冻结)"; break;
                            case 3 : arr[index].isLogin = "3 (正在登录)"; break;
                            case 4 : arr[index].isLogin = "4 (账号或者密码不正确)"; break;
                            case 5 : arr[index].isLogin = "5 (账号操作过于频繁)"; break;
                            case 6 : arr[index].isLogin = "6 (已被人为暂停)"; break;
                            case 8 : arr[index].isLogin = "8 (因有验证码的缘故, 已暂停使用)"; break;
                        }
                    })

                    return arr;
                },

                // 当前正在进行爬取的 QQ 号 的数量
                runingNum : function(){

                    var temp = 0;

                    this.QQArr.forEach(function(item, index){
                        if(item.isLogin === 1) temp ++;
                    })

                    return temp;
                },

                // 警告当前是否有爬虫还活着
                allDeathWaring : function(){

                    var temp = 0;

                    this.QQArr.forEach(function(item, index){
                        if(item.isLogin === 1 || item.isLogin === 0 || item.isLogin === 3) temp ++;
                    })

                    return temp;
                },

                // 与 当前爬取情况 状态 绑定
                QQstate : function(){

                    var temp = "";

                    switch(this.QQstateNum) {
                        case -1  : temp = (this.QQstateNum + " : 爬虫已终止");break;
                        case  1  : temp = (this.QQstateNum + " : 爬虫正常运行");break;
                        case  2  : temp = (this.QQstateNum + " : 爬虫无阻塞运行");break;
                        default  : temp = (this.QQstateNum + " : 未知参数");break;
                    }

                    return temp;
                }
            },
            methods: {

                /**
                 * 新增一个爬虫用户, 实现检查 QQ号 和 密码 的合法性, 并进行提交
                 */
                newQQuser: function() {

                    // 检查新建 QQ号 的表单是否合法
                    if (this.newUserQQ.length < 5 || this.newPassword.length < 5) {
                        alert("请填写正确的 QQ号 和 QQ密码 后重试!");
                        return;
                    }

                    // 检查当前爬虫列表中是否已存在要添加的爬虫
                    var passFlag = 1;
                    var that = this;
                    this.QQArrState.forEach(function(item, index){
                        if(that.newUserQQ == item.userQQ){
                            passFlag = 0;
                        }
                    })
                    if(!passFlag){alert("当前爬虫列表中已存在要添加的爬虫, 若要修改密码, 请删除已存在的爬虫!");return;}

                    var newQQobj = {
                        userQQ: this.newUserQQ,
                        password: this.newPassword
                    }

                    this.$http.post("/", newQQobj).then(function(data) {
                        alert(data.data)

                        this.newUserQQ = "";
                        this.newPassword = "";

                        // 创建后立即刷新列表
                        clearTimeout(this.getQQArrTimer);
                        this.getQQArr();
                    })
                },

                /**
                 * 定时获取当前爬虫的个人档信息, 并保存到 userInfos 中
                 */
                getUserInfo: function() {

                    this.$http.get("/list").then(function(data) {

                        // 检查返回内容是否为数组
                        if (!(data.data.userInfos instanceof Array)) return;

                        this.userInfos = data.data.userInfos;

                        this.statusQQNumbers = data.data.status.QQNumbers;
                        this.statusQQdone = data.data.status.QQdone;

                        this.config = data.data.config;
                        this.verifyImg = data.data.verifyImg;

                        this.QQstateNum = data.data.QQstateNum;
                    })

                     setTimeout(this.getUserInfo, 3000)

                },

                /**
                 * 定时获取当前爬虫已登录的QQ号, 并保存到 QQArr 里面
                 */
                getQQArr : function(){

                    this.$http.get("/QQArr").then(function(data){

                        // 检查返回内容是否为数组
                        if (!(data.data instanceof Array)) return;

                        this.QQArr = data.data;
                    })

                    this.getQQArrTimer = setTimeout(this.getQQArr, 3000)
                },

                /**
                 * 删除服务器里面特定位置的QQ号
                 * @param  {number} index 要删除的QQ号的位置
                 */
                deleteQQ :　 function(index){

                     if(typeof index !== 'number') return;

                     this.$http.post("/deleteQQ", {index : index}).then(function(data){
                        alert(data.data);
                     })

                     // 删除后立即刷新列表
                     clearTimeout(this.getQQArrTimer);
                     this.getQQArr();
                },

                /**
                 * 暂停使用/恢复服务器里面特定位置的QQ号
                 * @param  {number} index 要暂停使用/恢复的QQ号的位置
                 */
                pauseQQ : function(index){

                    if(typeof index !== 'number') return;

                    this.$http.post("/pauseQQ", {index : index}).then(function(data){
                       alert(data.data);
                    })

                    // 删除后立即刷新列表
                    clearTimeout(this.getQQArrTimer);
                    this.getQQArr();
                },

                /**
                 * 直接 eval 执行代码
                 */
                runCode : function() {
                    this.$http.post("/runCode", {code : this.evalCode}).then(function(data){
                       alert(data.data);
                    })
                },

                /**
                 * 提交验证码
                 */
                submitVerify: function () {
                    this.$http.post('/verify', {verifyCode:this.verifyCode}).then(function (res) {
                        if (res.data == 'success') {
                            this.verifyImg = "";
                            this.verifyCode = "";
                            alert('服务器已收到验证码, 正在提交...');
                        }
                    })
                },

                /**
                 * 停止当前所有爬虫的运行
                 */
                stopAll : function() {
                    this.$http.post("/stopAll").then(function(data){
                       alert(data.data);
                    })
                },

                /**
                 * 恢复所有的爬虫的运行
                 * @param  {number} state 开始进行爬取的方式, 1 代表 正常爬取,  2 代表 无阻塞爬取
                 */
                startAll : function(state) {
                    this.$http.post("/startAll", {state : state}).then(function(data){
                       alert(data.data);
                    })
                },
            }
        })
    </script>
  </body>
</html>

